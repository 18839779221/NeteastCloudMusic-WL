1. 模块化CSS的方案，CSS全局命名带来很大的命名负担

2. 此 JSX 标记的 "children" 属性需要 "ReactNode" 类型的子级，但提供了多个子级。
 答：正确使用<Fragment></Fragment>，案例详见MusicDetail.tsx

3. useState 更新对象的属性
  答：React更倾向于开发者使用多个简单数据类型的state，这样可以更方便后续的逻辑拆分。但是很多时候很难做到这一点，比如接口返回的数据就是复杂的数据类型，此时可以通过对象clone的方式更新state。
  setState(Objetc.assign({},prevState, { field: newValue }))
  如果是数组，setState(Objetc.assign({},prevState, { list: prevState.list.concat(["newItem"]) }))


4. 弹窗点击外部区域关闭
    const dismissOnClickOutSide = (event: Event) => {
      const targetNode = event?.target;
      if (targetNode instanceof HTMLElement) {
        const playListModalNode = document.querySelector(
          ".play-list-container"
        );
        if (
          targetNode !== playListModalNode &&
          !playListModalNode?.contains(targetNode)
        ) {
          props.close();
          event.preventDefault();
        }
      }
    };

5. 设置标签不可点击
{
    pointer-events: none;
    cursor: pointer;
}

6. 不舒服的用法：与外部交互的组件的必须对外暴露props
    例如包含title的Dialog组件需要暴露的props有title和onTitleChanged()两个属性，另外外部需要持有state.title，且需要实现onTitleChanged()，这样内部组件的功能并不是完备的，必须依赖外部才能完成其功能。
    因为缺少对外暴露的方法，组件只能和外部相互协作来完成自身功能，是否也是破坏了组件的内聚性质呢。如果能直接提供Dialog.setTitle()方法，提供Dialog.close()方法，看起来使用是更为方便的。
    对于登录弹窗的场景，如果有多个地方的点击需要弹出登录弹窗，则每个地方都需要处理登录弹窗的visible状态。

7. 不方便的用法：music?.lyric = lyric ,如果music可能为空，则此代码必须写为
  if (music) {
    music.lyric = lyric
  }

8. interface实例化
  先创建对象，然后使用 as 转换
  const userInfoState = {
    userInfo: null
  } as UserInfoState

9. 页面中有多个入口可以触发登录弹窗（PhoneLoginModal），目前因为登录弹窗会阻止其遮罩下的UI点击，所以暂无问题。但是如果登录弹窗不阻止下层组件的点击，则可能会在已有登录弹窗的情况下再弹出一个新的登录弹窗，只能添加逻辑在每次弹出弹窗前判断是否已经存在某个登录弹窗实例（可使用querySelector）。另外一点是由于登录弹窗一般通过自身暴露props:{visible: boolean, close: () => {}}来组织代码，这样会导致所有吊起登录弹窗的按钮所在组件都要实现一次close方法，并使用一个loginModalVisible的state来控制弹窗展示，看起来这里是可以通过某种手段优化的，但是具体该如何做。
 答：使用React.Context解决，此问题本质上是寻找最小公共祖先的问题。对于任意位置可能触发弹窗的按钮，他们的公共组件只能是根组件，于是我们可以在App组件中创建context暴露出{visible: boolean, setVisible: (visible: boolean) => void}，并设置setVisible的实现。在所有吊起登录弹窗的地方使用setVisible方法来改变弹窗可见性。这样就可保证全局只有一个登录弹窗。